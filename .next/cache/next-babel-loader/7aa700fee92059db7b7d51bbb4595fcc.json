{"ast":null,"code":"import Web3 from 'web3';\n\nconst {\n  abi\n} = require('../build/contracts/Retailing.json');\n\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\n\nasync function connectWallet() {\n  if (window.ethereum && window.ethereum.chainId == '0x61') {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    window.web3 = new Web3(window.ethereum);\n    const account = web3.eth.accounts; //      const fromAddress = account.givenProvider.selectedAddress;\n    //      console.log(`Wallet: ${fromAddress}`);\n    //      const contract = new web3.eth.Contract(abi,contractAddress);\n    //     console.log(`Contract: ${contract}`);\n    //  // const chainId = web3.utils.toHex(97);\n    //     const chainId = 97\n    //      console.log(`Chain ID: ${chainId}`);\n    //      console.log(`abi: ${abi}`);\n    //      contract.methods.paid(fromAddress, 11)\n    //      .send({\n    //            from: fromAddress,\n    //            gas: 0x00,\n    //            gasPrice: 0x00\n    //      }).then(receipt=> {console.log(receipt)})\n    //   if (typeof window.ethereum !== 'undefined') {\n    //     ethereum.request({ method: 'eth_requestAccounts' });\n    // } else {\n    //     alert('Please install metamask')\n    // };\n    // Use BigNumber\n\n    let decimals = web3.utils.toBN(18);\n    let amount = web3.utils.toBN(100); // Get ERC20 Token contract instance\n\n    let contract = new web3.eth.Contract(abi, tokenContractAddress); // calculate ERC20 token amount\n\n    let value = amount.mul(web3.utils.toBN(10).pow(decimals)); // call transfer function\n\n    contract.methods.paid(toAddress, value).send({\n      from: fromAddress\n    }).on('transactionHash', function (hash) {\n      console.log(hash);\n    });\n  }\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","abi","require","toAddress","tokenContractAddress","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","decimals","utils","toBN","amount","contract","Contract","value","mul","pow","methods","paid","send","from","fromAddress","on","hash","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAQA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,OAAO,CAAC,mCAAD,CAAvB;;AACA,MAAMC,SAAS,GAAG,4CAAlB;AACA,MAAMC,oBAAoB,GAAG,4CAA7B;;AAGA,eAAeC,aAAf,GAA+B;AAE3B,MAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,MAAlD,EAA0D;AACvDF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB;AACAJ,IAAAA,MAAM,CAACK,IAAP,GAAc,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACA,UAAMK,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,QAAzB,CAHuD,CAI5D;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AACF,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAgB,EAAhB,CAAf;AACA,QAAIC,MAAM,GAAGP,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAgB,GAAhB,CAAb,CA9B8D,CA+B5D;;AACF,QAAIE,QAAQ,GAAG,IAAIR,IAAI,CAACE,GAAL,CAASO,QAAb,CAAsBnB,GAAtB,EAA2BG,oBAA3B,CAAf,CAhC8D,CAiC9D;;AACA,QAAIiB,KAAK,GAAGH,MAAM,CAACI,GAAP,CAAWX,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAgB,EAAhB,EAAoBM,GAApB,CAAwBR,QAAxB,CAAX,CAAZ,CAlC8D,CAmC9D;;AACAI,IAAAA,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,CAAsBtB,SAAtB,EAAiCkB,KAAjC,EAAwCK,IAAxC,CAA6C;AAACC,MAAAA,IAAI,EAAEC;AAAP,KAA7C,EACCC,EADD,CACI,iBADJ,EACuB,UAASC,IAAT,EAAc;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAHD;AAKG;AAEF;;AAQD,eAAezB,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2'\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n  //      const fromAddress = account.givenProvider.selectedAddress;\r\n  //      console.log(`Wallet: ${fromAddress}`);\r\n  //      const contract = new web3.eth.Contract(abi,contractAddress);\r\n  //     console.log(`Contract: ${contract}`);\r\n\r\n  //  // const chainId = web3.utils.toHex(97);\r\n  //     const chainId = 97\r\n\r\n  //      console.log(`Chain ID: ${chainId}`);\r\n  //      console.log(`abi: ${abi}`);\r\n  //      contract.methods.paid(fromAddress, 11)\r\n  //      .send({\r\n  //            from: fromAddress,\r\n  //            gas: 0x00,\r\n  //            gasPrice: 0x00\r\n  //      }).then(receipt=> {console.log(receipt)})\r\n       \r\n  //   if (typeof window.ethereum !== 'undefined') {\r\n  //     ethereum.request({ method: 'eth_requestAccounts' });\r\n  // } else {\r\n  //     alert('Please install metamask')\r\n  // };\r\n\r\n\r\n  // Use BigNumber\r\nlet decimals = web3.utils.toBN(18);\r\nlet amount = web3.utils.toBN(100);\r\n  // Get ERC20 Token contract instance\r\nlet contract = new web3.eth.Contract(abi, tokenContractAddress);\r\n// calculate ERC20 token amount\r\nlet value = amount.mul(web3.utils.toBN(10).pow(decimals));\r\n// call transfer function\r\ncontract.methods.paid(toAddress, value).send({from: fromAddress})\r\n.on('transactionHash', function(hash){\r\n  console.log(hash);\r\n});\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet"]},"metadata":{},"sourceType":"module"}