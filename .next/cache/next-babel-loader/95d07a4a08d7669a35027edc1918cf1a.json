{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nvar reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var account, _walletAddress, contract, chainId;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum && window.ethereum.chainId == '0x61') {\n              window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n              window.web3 = new Web3(window.ethereum);\n              account = web3.eth.accounts;\n              _walletAddress = account.givenProvider.selectedAddress;\n              console.log(\"Wallet: \".concat(_walletAddress));\n              contract = new web3.eth.Contract(abi, contractAddress);\n              chainId = web3.utils.toHex(97);\n              console.log(\"Chain ID: \".concat(chainId));\n              console.log(abi);\n              contract.methods.paid(_walletAddress).send({\n                from: _walletAddress,\n                gas: 0x00,\n                gasPrice: 0x00\n              }).then(function (receipt) {\n                console.log(receipt);\n              });\n\n              if (typeof window.ethereum !== 'undefined') {\n                ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n              } else {\n                alert('Please install metamask');\n              }\n\n              ;\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction sendToken() {\n  return _sendToken.apply(this, arguments);\n}\n\nfunction _sendToken() {\n  _sendToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var count, data, estimatedGasPrice, rawTx, tx, serializedTx, receipt;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3Config.web3.eth.getTransactionCount(walletAddress);\n\n          case 2:\n            count = _context2.sent;\n            data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount * Math.pow(10, 18)).encodeABI();\n            _context2.next = 6;\n            return web3Config.web3.eth.estimateGas({\n              from: walletAddress,\n              to: reciever,\n              data: data\n            });\n\n          case 6:\n            estimatedGasPrice = _context2.sent;\n            logs.error(estimatedGasPrice);\n            rawTx = {\n              from: process.env.OWNER_ADDRESS,\n              to: process.env.CONTRACT_ADDRESS,\n              data: data,\n              nonce: \"0x\" + count.toString(16),\n              gasPrice: web3Config.gasPrice,\n              value: '0x0',\n              gasLimit: estimatedGasPrice,\n              chainId: 3\n            };\n            tx = new Tx(rawTx);\n            tx.sign(web3Config.ownerPrivKey);\n            serializedTx = tx.serialize();\n            _context2.next = 14;\n            return web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n\n          case 14:\n            receipt = _context2.sent;\n            res.send(receipt);\n            logs.log(receipt);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _sendToken.apply(this, arguments);\n}\n\nexport default connectWallet;\nsendToken;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","require","abi","contractAddress","reciever","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","walletAddress","givenProvider","selectedAddress","console","log","contract","Contract","utils","toHex","methods","paid","send","from","gas","gasPrice","then","receipt","alert","sendToken","web3Config","getTransactionCount","count","data","contractInstance","transfer","req","body","address","amount","Math","pow","encodeABI","estimateGas","to","estimatedGasPrice","logs","error","rawTx","process","env","OWNER_ADDRESS","CONTRACT_ADDRESS","nonce","toString","value","gasLimit","tx","Tx","sign","ownerPrivKey","serializedTx","serialize","sendSignedTransaction","res"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       const walletAddress = account.givenProvider.selectedAddress;\r\n       console.log(`Wallet: ${walletAddress}`);\r\n       const contract = new web3.eth.Contract(abi,contractAddress);\r\n       const chainId = web3.utils.toHex(97);\r\n       console.log(`Chain ID: ${chainId}`);\r\n       console.log(abi)\r\n       contract.methods.paid(walletAddress)\r\n       .send({\r\n             from: walletAddress,\r\n             gas: 0x00,\r\n             gasPrice: 0x00\r\n       }).then(receipt=> {console.log(receipt)})\r\n       \r\n    if (typeof window.ethereum !== 'undefined') {\r\n      ethereum.request({ method: 'eth_requestAccounts' });\r\n  } else {\r\n      alert('Please install metamask')\r\n  };\r\n  }\r\n\r\n}\r\n\r\nasync function sendToken (){\r\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\r\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount*Math.pow(10,18)).encodeABI();\r\n\r\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\r\n    from : walletAddress,\r\n    to:   reciever,\r\n    data : data\r\n  });\r\n\r\n    logs.error(estimatedGasPrice)\r\n    var rawTx = {\r\n        from : process.env.OWNER_ADDRESS,\r\n        to:   process.env.CONTRACT_ADDRESS,\r\n        data : data,\r\n        nonce: \"0x\" + count.toString(16),\r\n        gasPrice: web3Config.gasPrice,\r\n        value: '0x0',\r\n        gasLimit: estimatedGasPrice,\r\n        chainId: 3\r\n    }\r\n\r\n    var tx = new Tx(rawTx);\r\n    tx.sign(web3Config.ownerPrivKey);\r\n    var serializedTx = tx.serialize();\r\n\r\n    var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\r\n    res.send(receipt)\r\n    logs.log(receipt)\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet; sendToken"]},"metadata":{},"sourceType":"module"}