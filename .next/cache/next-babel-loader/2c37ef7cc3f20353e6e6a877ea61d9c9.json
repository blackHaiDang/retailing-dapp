{"ast":null,"code":"window.ethereum.request({\n  method: \"eth_requestAccounts\"\n});\nwindow.web3 = new Web3(window.ethereum);\nconst account = web3.eth.accounts;\nconst fromAddress = account.givenProvider.selectedAddress;\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nconst txData = {\n  nonce,\n  gasLimit,\n  gasPrice,\n  value,\n  data,\n  // containing info that you want to `transfer()` to the `receiver`\n  from: fromAddress,\n  // send transaction from your address\n  to: toAddress // CHANGED; send transaction to the contract address\n\n};\n\nfunction tx() {\n  var Tx = require(\"ethereumjs-tx\").Transaction;\n\n  var amount = web3.utils.toHex(1e16);\n  web3.eth.getTransactionCount(fromAddress).then(function (v) {\n    console.log(v);\n  }); // set your private key here, we'll sign the transaction below\n\n  var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\";\n  const privateKeyBuffer = Buffer.from(privateKey, 'hex');\n  var contract = new web3.eth.Contract(abi, tokenContractAddress, {\n    from: fromAddress\n  });\n  const transaction = new Tx.Transaction(txData);\n  transaction.sign(privateKeyBuffer);\n  web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'));\n}\n\nexport default tx;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/transaction.js"],"names":["window","ethereum","request","method","web3","Web3","account","eth","accounts","fromAddress","givenProvider","selectedAddress","toAddress","txData","nonce","gasLimit","gasPrice","value","data","from","to","tx","Tx","require","Transaction","amount","utils","toHex","getTransactionCount","then","v","console","log","privateKey","privateKeyBuffer","Buffer","contract","Contract","abi","tokenContractAddress","transaction","sign","sendSignedTransaction","serialize","toString"],"mappings":"AAGAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAxB;AACAH,MAAM,CAACI,IAAP,GAAc,IAAIC,IAAJ,CAASL,MAAM,CAACC,QAAhB,CAAd;AACA,MAAMK,OAAO,GAAGF,IAAI,CAACG,GAAL,CAASC,QAAzB;AACA,MAAMC,WAAW,GAAGH,OAAO,CAACI,aAAR,CAAsBC,eAA1C;AACA,MAAMC,SAAS,GAAG,4CAAlB;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,KADW;AAEXC,EAAAA,QAFW;AAGXC,EAAAA,QAHW;AAIXC,EAAAA,KAJW;AAKXC,EAAAA,IALW;AAKL;AACNC,EAAAA,IAAI,EAAEV,WANK;AAMQ;AACnBW,EAAAA,EAAE,EAAER,SAPO,CAOG;;AAPH,CAAf;;AASA,SAASS,EAAT,GAAa;AACb,MAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AACA,MAAIC,MAAM,GAAGrB,IAAI,CAACsB,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CAAb;AACAvB,EAAAA,IAAI,CAACG,GAAL,CAASqB,mBAAT,CAA6BnB,WAA7B,EAA0CoB,IAA1C,CAA+C,UAASC,CAAT,EAAW;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,GAA3E,EAHa,CAIb;;AACA,MAAIG,UAAU,GAAG,kCAAjB;AACA,QAAMC,gBAAgB,GAAGC,MAAM,CAAChB,IAAP,CAAYc,UAAZ,EAAwB,KAAxB,CAAzB;AACA,MAAIG,QAAQ,GAAG,IAAIhC,IAAI,CAACG,GAAL,CAAS8B,QAAb,CAAsBC,GAAtB,EAA2BC,oBAA3B,EAAiD;AAACpB,IAAAA,IAAI,EAAEV;AAAP,GAAjD,CAAf;AAEA,QAAM+B,WAAW,GAAG,IAAIlB,EAAE,CAACE,WAAP,CAAmBX,MAAnB,CAApB;AACA2B,EAAAA,WAAW,CAACC,IAAZ,CAAiBP,gBAAjB;AACA9B,EAAAA,IAAI,CAACG,GAAL,CAASmC,qBAAT,CAA+B,OAAOF,WAAW,CAACG,SAAZ,GAAwBC,QAAxB,CAAiC,KAAjC,CAAtC;AACC;;AAED,eAAevB,EAAf","sourcesContent":["\r\n\r\n\r\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\r\nwindow.web3 = new Web3(window.ethereum);\r\nconst account = web3.eth.accounts;\r\nconst fromAddress = account.givenProvider.selectedAddress;\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\nconst txData = {\r\n    nonce,\r\n    gasLimit,\r\n    gasPrice,\r\n    value,\r\n    data, // containing info that you want to `transfer()` to the `receiver`\r\n    from: fromAddress, // send transaction from your address\r\n    to: toAddress // CHANGED; send transaction to the contract address\r\n};\r\nfunction tx(){\r\nvar Tx = require(\"ethereumjs-tx\").Transaction\r\nvar amount = web3.utils.toHex(1e16)\r\nweb3.eth.getTransactionCount(fromAddress).then(function(v){console.log(v);})  \r\n// set your private key here, we'll sign the transaction below\r\nvar privateKey = \"77dc2BE0B2463F8E049502330d5C9791\"  \r\nconst privateKeyBuffer = Buffer.from(privateKey, 'hex')\r\nvar contract = new web3.eth.Contract(abi, tokenContractAddress, {from: fromAddress})\r\n\r\nconst transaction = new Tx.Transaction(txData)\r\ntransaction.sign(privateKeyBuffer)\r\nweb3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))\r\n}\r\n\r\nexport default tx"]},"metadata":{},"sourceType":"module"}