{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nvar tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var account, fromAddress, Tx, amount, privateKey, contract, rawTransaction, transaction;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum && window.ethereum.chainId == '0') {\n              window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n              window.web3 = new Web3(window.ethereum);\n              account = web3.eth.accounts;\n              fromAddress = account.givenProvider.selectedAddress; //      console.log(`Wallet: ${fromAddress}`);\n              //      const contract = new web3.eth.Contract(abi,contractAddress);\n              //     console.log(`Contract: ${contract}`);\n              //  // const chainId = web3.utils.toHex(97);\n              //     const chainId = 97\n              //      console.log(`Chain ID: ${chainId}`);\n              //      console.log(`abi: ${abi}`);\n              //      contract.methods.paid(fromAddress, 11)\n              //      .send({\n              //            from: fromAddress,\n              //            gas: 0x00,\n              //            gasPrice: 0x00\n              //      }).then(receipt=> {console.log(receipt)})\n              //   if (typeof window.ethereum !== 'undefined') {\n              //     ethereum.request({ method: 'eth_requestAccounts' });\n              // } else {\n              //     alert('Please install metamask')\n              // };\n\n              Tx = require(\"ethereumjs-tx\").Transaction;\n              amount = web3.utils.toHex(1e16);\n              web3.eth.getTransactionCount(fromAddress).then(function (v) {\n                console.log(v);\n              }); // set your private key here, we'll sign the transaction below\n\n              privateKey = \"77dc2BE0B2463F8E049502330d5C9791\";\n              contract = new web3.eth.Contract(abi, tokenContractAddress, {\n                from: fromAddress\n              });\n              rawTransaction = {\n                \"from\": fromAddress,\n                \"gasPrice\": web3.utils.toHex(2 * 1e9),\n                \"gasLimit\": web3.utils.toHex(210000),\n                \"to\": tokenContractAddress,\n                \"value\": \"0x0\",\n                \"data\": contract.methods.paid(toAddress, amount).encodeABI(),\n                \"nonce\": web3.utils.toHex(10)\n              };\n            }\n\n            transaction = new Tx(rawTransaction);\n            transaction.sign(privateKey);\n            web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex')); //  contract.methods.balanceOf(0x2EFb54Fd77dc2BE0B2463F8E049502330d5C9791).call().then(function(balance){console.log(balance)})\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","require","abi","toAddress","tokenContractAddress","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","fromAddress","givenProvider","selectedAddress","Tx","Transaction","amount","utils","toHex","getTransactionCount","then","v","console","log","privateKey","contract","Contract","from","rawTransaction","methods","paid","encodeABI","transaction","sign","sendSignedTransaction","serialize","toString"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;eAQgBC,OAAO,CAAC,mCAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAG,4CAAlB;AACA,IAAMC,oBAAoB,GAAG,4CAA7B;;SAGeC,a;;;;;4EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,gBAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,GAAlD,EAAuD;AACpDF,cAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAxB;AACAJ,cAAAA,MAAM,CAACK,IAAP,GAAc,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACMK,cAAAA,OAH8C,GAGpCD,IAAI,CAACE,GAAL,CAASC,QAH2B;AAI9CC,cAAAA,WAJ8C,GAIhCH,OAAO,CAACI,aAAR,CAAsBC,eAJU,EAKzD;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGIC,cAAAA,EA5BqD,GA4BhDjB,OAAO,CAAC,eAAD,CAAP,CAAyBkB,WA5BuB;AA6BrDC,cAAAA,MA7BqD,GA6B5CT,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CA7B4C;AA8BzDX,cAAAA,IAAI,CAACE,GAAL,CAASU,mBAAT,CAA6BR,WAA7B,EAA0CS,IAA1C,CAA+C,UAASC,CAAT,EAAW;AAACC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,eAA3E,EA9ByD,CA+B3D;;AACMG,cAAAA,UAhCqD,GAgCxC,kCAhCwC;AAiCrDC,cAAAA,QAjCqD,GAiC1C,IAAIlB,IAAI,CAACE,GAAL,CAASiB,QAAb,CAAsB5B,GAAtB,EAA2BE,oBAA3B,EAAiD;AAAC2B,gBAAAA,IAAI,EAAEhB;AAAP,eAAjD,CAjC0C;AAkCrDiB,cAAAA,cAlCqD,GAkCpC;AAAC,wBAAOjB,WAAR;AAAqB,4BAAWJ,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,IAAI,GAArB,CAAhC;AAA0D,4BAAWX,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,MAAjB,CAArE;AAA8F,sBAAKlB,oBAAnG;AAAwH,yBAAQ,KAAhI;AAAsI,wBAAOyB,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsB/B,SAAtB,EAAiCiB,MAAjC,EAAyCe,SAAzC,EAA7I;AAAkM,yBAAQxB,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,EAAjB;AAA1M,eAlCoC;AAmCxD;;AACGc,YAAAA,WAtCN,GAsCoB,IAAIlB,EAAJ,CAAOc,cAAP,CAtCpB;AAuCEI,YAAAA,WAAW,CAACC,IAAZ,CAAiBT,UAAjB;AACAjB,YAAAA,IAAI,CAACE,GAAL,CAASyB,qBAAT,CAA+B,OAAOF,WAAW,CAACG,SAAZ,GAAwBC,QAAxB,CAAiC,KAAjC,CAAtC,EAxCF,CAyCA;;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkDA,eAAenC,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2'\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       const fromAddress = account.givenProvider.selectedAddress;\r\n  //      console.log(`Wallet: ${fromAddress}`);\r\n  //      const contract = new web3.eth.Contract(abi,contractAddress);\r\n  //     console.log(`Contract: ${contract}`);\r\n\r\n  //  // const chainId = web3.utils.toHex(97);\r\n  //     const chainId = 97\r\n\r\n  //      console.log(`Chain ID: ${chainId}`);\r\n  //      console.log(`abi: ${abi}`);\r\n  //      contract.methods.paid(fromAddress, 11)\r\n  //      .send({\r\n  //            from: fromAddress,\r\n  //            gas: 0x00,\r\n  //            gasPrice: 0x00\r\n  //      }).then(receipt=> {console.log(receipt)})\r\n       \r\n  //   if (typeof window.ethereum !== 'undefined') {\r\n  //     ethereum.request({ method: 'eth_requestAccounts' });\r\n  // } else {\r\n  //     alert('Please install metamask')\r\n  // };\r\n\r\n\r\n  var Tx = require(\"ethereumjs-tx\").Transaction\r\n  var amount = web3.utils.toHex(1e16)\r\n  web3.eth.getTransactionCount(fromAddress).then(function(v){console.log(v);})  \r\n// set your private key here, we'll sign the transaction below\r\n  var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\"  \r\n  var contract = new web3.eth.Contract(abi, tokenContractAddress, {from: fromAddress})\r\n  var rawTransaction = {\"from\":fromAddress, \"gasPrice\":web3.utils.toHex(2 * 1e9),\"gasLimit\":web3.utils.toHex(210000),\"to\":tokenContractAddress,\"value\":\"0x0\",\"data\":contract.methods.paid(toAddress, amount).encodeABI(),\"nonce\":web3.utils.toHex(10)} \r\n  }\r\n  var transaction = new Tx(rawTransaction)\r\n  transaction.sign(privateKey)\r\n  web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))\r\n//  contract.methods.balanceOf(0x2EFb54Fd77dc2BE0B2463F8E049502330d5C9791).call().then(function(balance){console.log(balance)})\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet"]},"metadata":{},"sourceType":"module"}