{"ast":null,"code":"import Web3 from 'web3';\n\nconst {\n  abi\n} = require('../build/contracts/Retailing.json');\n\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\n\nasync function connectWallet() {\n  if (window.ethereum) {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    window.web3 = new Web3(window.ethereum);\n    const account = web3.eth.accounts; //Get the current MetaMask selected/active wallet\n\n    const walletAddress = account.givenProvider.selectedAddress;\n    console.log(`Wallet: ${walletAddress}`);\n    const contract = new web3.eth.Contract(abi, contractAddress);\n    console.log(\"TX Address:\" + walletAddress);\n    console.log(web3.utils.toChecksumAddress(walletAddress));\n    contract.methods.paid(walletAddress).send({\n      from: walletAddress,\n      gas: 0x00,\n      gasPrice: 0x00\n    }).then(receipt => {\n      console.log(receipt);\n    });\n\n    if (typeof window.ethereum !== 'undefined') {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } else {\n      alert('Please install metamask');\n    }\n\n    ;\n  }\n\n  const chainId = web3.utils.toHex(97);\n  console.log(chainId);\n  console.log(abi); // web3.utils.toChecksumAddress(\"walletAddress\")\n\n  if (window.ethereum.chainId == '0x61') {\n    const contract = new web3.eth.Contract(abi, contractAddress);\n    contract.methods.paid().send({\n      from: \"walletAddress\",\n      gas: 0x00,\n      gasPrice: 0x00\n    }).then(receipt => {\n      console.log(receipt);\n    });\n  } else {\n    ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: '0x61'\n      }]\n    });\n  }\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","abi","require","contractAddress","reciever","connectWallet","window","ethereum","request","method","web3","account","eth","accounts","walletAddress","givenProvider","selectedAddress","console","log","contract","Contract","utils","toChecksumAddress","methods","paid","send","from","gas","gasPrice","then","receipt","alert","chainId","toHex","params"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,OAAO,CAAC,mCAAD,CAAvB;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,MAAMC,QAAQ,GAAG,4CAAjB;;AAGA,eAAeC,aAAf,GAA+B;AAE3B,MAAIC,MAAM,CAACC,QAAX,EAAqB;AAClBD,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB;AACAH,IAAAA,MAAM,CAACI,IAAP,GAAc,IAAIV,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACA,UAAMI,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,QAAzB,CAHkB,CAIlB;;AACA,UAAMC,aAAa,GAAGH,OAAO,CAACI,aAAR,CAAsBC,eAA5C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUJ,aAAc,EAArC;AACA,UAAMK,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBnB,GAAtB,EAA0BE,eAA1B,CAAjB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBJ,aAA5B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACW,KAAL,CAAWC,iBAAX,CAA6BR,aAA7B,CAAZ;AAEAK,IAAAA,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsBV,aAAtB,EACCW,IADD,CACM;AACAC,MAAAA,IAAI,EAAEZ,aADN;AAEAa,MAAAA,GAAG,EAAE,IAFL;AAGAC,MAAAA,QAAQ,EAAE;AAHV,KADN,EAKGC,IALH,CAKQC,OAAO,IAAG;AAACb,MAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AAAqB,KALxC;;AAOH,QAAI,OAAOxB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1CA,MAAAA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB;AACH,KAFC,MAEK;AACHsB,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;;AAAA;AACA;;AAGD,QAAMC,OAAO,GAAGtB,IAAI,CAACW,KAAL,CAAWY,KAAX,CAAiB,EAAjB,CAAhB;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAZ,EA9B6B,CA+B7B;;AACA,MAAGK,MAAM,CAACC,QAAP,CAAgByB,OAAhB,IAA2B,MAA9B,EAAqC;AACnC,UAAMb,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBnB,GAAtB,EAA0BE,eAA1B,CAAjB;AACAgB,IAAAA,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,GACCC,IADD,CACM;AACAC,MAAAA,IAAI,EAAE,eADN;AAEAC,MAAAA,GAAG,EAAE,IAFL;AAGAC,MAAAA,QAAQ,EAAE;AAHV,KADN,EAKGC,IALH,CAKQC,OAAO,IAAG;AAACb,MAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AAAqB,KALxC;AAUD,GAZD,MAYO;AACLvB,IAAAA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE,4BAAV;AAAwCyB,MAAAA,MAAM,EAAC,CAAC;AAACF,QAAAA,OAAO,EAAE;AAAV,OAAD;AAA/C,KAAjB;AACD;AACF;;AAMD,eAAe3B,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum) {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       //Get the current MetaMask selected/active wallet\r\n       const walletAddress = account.givenProvider.selectedAddress;\r\n       console.log(`Wallet: ${walletAddress}`);\r\n       const contract = new web3.eth.Contract(abi,contractAddress);\r\n       console.log(\"TX Address:\" + walletAddress)\r\n       console.log(web3.utils.toChecksumAddress(walletAddress))\r\n       \r\n       contract.methods.paid(walletAddress)\r\n       .send({\r\n             from: walletAddress,\r\n             gas: 0x00,\r\n             gasPrice: 0x00\r\n       }).then(receipt=> {console.log(receipt)})\r\n       \r\n    if (typeof window.ethereum !== 'undefined') {\r\n      ethereum.request({ method: 'eth_requestAccounts' });\r\n  } else {\r\n      alert('Please install metamask')\r\n  };\r\n  }\r\n\r\n\r\n  const chainId = web3.utils.toHex(97);\r\n  console.log(chainId)\r\n  console.log(abi)\r\n  // web3.utils.toChecksumAddress(\"walletAddress\")\r\n  if(window.ethereum.chainId == '0x61'){\r\n    const contract = new web3.eth.Contract(abi,contractAddress);\r\n    contract.methods.paid()\r\n    .send({\r\n          from: \"walletAddress\",\r\n          gas: 0x00,\r\n          gasPrice: 0x00\r\n    }).then(receipt=> {console.log(receipt)})\r\n\r\n\r\n\r\n    \r\n  } else {\r\n    ethereum.request({ method: 'wallet_switchEthereumChain', params:[{chainId: '0x61'}]})\r\n  }\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet;"]},"metadata":{},"sourceType":"module"}