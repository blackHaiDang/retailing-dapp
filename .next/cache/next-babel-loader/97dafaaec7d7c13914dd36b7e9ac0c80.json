{"ast":null,"code":"import Web3 from 'web3';\n\nconst {\n  abi\n} = require('../build/contracts/Retailing.json');\n\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54'; // async function connectWallet() {\n//     if (window.ethereum && window.ethereum.chainId == '0x61') {\n//        window.ethereum.request({ method: \"eth_requestAccounts\" });\n//        window.web3 = new Web3(window.ethereum);\n//        const account = web3.eth.accounts;\n//        const walletAddress = account.givenProvider.selectedAddress;\n//        console.log(`Wallet: ${walletAddress}`);\n//        const contract = new web3.eth.Contract(abi,contractAddress);\n//        const chainId = web3.utils.toHex(97);\n//        console.log(`Chain ID: ${chainId}`);\n//        console.log(abi)\n//        contract.methods.paid(walletAddress)\n//        .send({\n//              from: walletAddress,\n//              gas: 0x00,\n//              gasPrice: 0x00\n//        }).then(receipt=> {console.log(receipt)})\n//     if (typeof window.ethereum !== 'undefined') {\n//       ethereum.request({ method: 'eth_requestAccounts' });\n//   } else {\n//       alert('Please install metamask')\n//   };\n//   }\n// }\n\nasync function connectWallet() {\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount * Math.pow(10, 18)).encodeABI();\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\n    from: walletAddress,\n    to: reciever,\n    data: data\n  });\n  logs.error(estimatedGasPrice);\n  var rawTx = {\n    from: process.env.OWNER_ADDRESS,\n    to: process.env.CONTRACT_ADDRESS,\n    data: data,\n    nonce: \"0x\" + count.toString(16),\n    gasPrice: web3Config.gasPrice,\n    value: '0x0',\n    gasLimit: estimatedGasPrice,\n    chainId: 3\n  };\n  var tx = new Tx(rawTx);\n  tx.sign(web3Config.ownerPrivKey);\n  var serializedTx = tx.serialize();\n  var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n  res.send(receipt);\n  logs.log(receipt);\n}\n\nexport default connectWallet;\nsendToken;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","abi","require","contractAddress","reciever","connectWallet","count","web3Config","web3","eth","getTransactionCount","walletAddress","data","contractInstance","methods","transfer","req","body","address","amount","Math","pow","encodeABI","estimatedGasPrice","estimateGas","from","to","logs","error","rawTx","process","env","OWNER_ADDRESS","CONTRACT_ADDRESS","nonce","toString","gasPrice","value","gasLimit","chainId","tx","Tx","sign","ownerPrivKey","serializedTx","serialize","receipt","sendSignedTransaction","res","send","log","sendToken"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,OAAO,CAAC,mCAAD,CAAvB;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,MAAMC,QAAQ,GAAG,4CAAjB,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,eAAeC,aAAf,GAA+B;AAC7B,MAAIC,KAAK,GAAG,MAAMC,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBC,mBAApB,CAAwCC,aAAxC,CAAlB;AACA,MAAIC,IAAI,GAAGL,UAAU,CAACM,gBAAX,CAA4BC,OAA5B,CAAoCC,QAApC,CAA6CC,GAAG,CAACC,IAAJ,CAASC,OAAtD,EAA+DF,GAAG,CAACC,IAAJ,CAASE,MAAT,GAAgBC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAY,EAAZ,CAA/E,EAAgGC,SAAhG,EAAX;AAEA,MAAIC,iBAAiB,GAAG,MAAMhB,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBe,WAApB,CAAgC;AAC5DC,IAAAA,IAAI,EAAGd,aADqD;AAE5De,IAAAA,EAAE,EAAItB,QAFsD;AAG5DQ,IAAAA,IAAI,EAAGA;AAHqD,GAAhC,CAA9B;AAMEe,EAAAA,IAAI,CAACC,KAAL,CAAWL,iBAAX;AACA,MAAIM,KAAK,GAAG;AACRJ,IAAAA,IAAI,EAAGK,OAAO,CAACC,GAAR,CAAYC,aADX;AAERN,IAAAA,EAAE,EAAII,OAAO,CAACC,GAAR,CAAYE,gBAFV;AAGRrB,IAAAA,IAAI,EAAGA,IAHC;AAIRsB,IAAAA,KAAK,EAAE,OAAO5B,KAAK,CAAC6B,QAAN,CAAe,EAAf,CAJN;AAKRC,IAAAA,QAAQ,EAAE7B,UAAU,CAAC6B,QALb;AAMRC,IAAAA,KAAK,EAAE,KANC;AAORC,IAAAA,QAAQ,EAAEf,iBAPF;AAQRgB,IAAAA,OAAO,EAAE;AARD,GAAZ;AAWA,MAAIC,EAAE,GAAG,IAAIC,EAAJ,CAAOZ,KAAP,CAAT;AACAW,EAAAA,EAAE,CAACE,IAAH,CAAQnC,UAAU,CAACoC,YAAnB;AACA,MAAIC,YAAY,GAAGJ,EAAE,CAACK,SAAH,EAAnB;AAEA,MAAIC,OAAO,GAAG,MAAMvC,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBsC,qBAApB,CAA0C,OAAOH,YAAY,CAACT,QAAb,CAAsB,KAAtB,CAAjD,CAApB;AACAa,EAAAA,GAAG,CAACC,IAAJ,CAASH,OAAT;AACAnB,EAAAA,IAAI,CAACuB,GAAL,CAASJ,OAAT;AACH;;AAMD,eAAezC,aAAf;AAA8B8C,SAAS","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\n// async function connectWallet() {\r\n\r\n//     if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n//        window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n//        window.web3 = new Web3(window.ethereum);\r\n//        const account = web3.eth.accounts;\r\n//        const walletAddress = account.givenProvider.selectedAddress;\r\n//        console.log(`Wallet: ${walletAddress}`);\r\n//        const contract = new web3.eth.Contract(abi,contractAddress);\r\n//        const chainId = web3.utils.toHex(97);\r\n//        console.log(`Chain ID: ${chainId}`);\r\n//        console.log(abi)\r\n//        contract.methods.paid(walletAddress)\r\n//        .send({\r\n//              from: walletAddress,\r\n//              gas: 0x00,\r\n//              gasPrice: 0x00\r\n//        }).then(receipt=> {console.log(receipt)})\r\n       \r\n//     if (typeof window.ethereum !== 'undefined') {\r\n//       ethereum.request({ method: 'eth_requestAccounts' });\r\n//   } else {\r\n//       alert('Please install metamask')\r\n//   };\r\n//   }\r\n\r\n// }\r\n\r\nasync function connectWallet (){\r\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\r\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount*Math.pow(10,18)).encodeABI();\r\n\r\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\r\n    from : walletAddress,\r\n    to:   reciever,\r\n    data : data\r\n  });\r\n\r\n    logs.error(estimatedGasPrice)\r\n    var rawTx = {\r\n        from : process.env.OWNER_ADDRESS,\r\n        to:   process.env.CONTRACT_ADDRESS,\r\n        data : data,\r\n        nonce: \"0x\" + count.toString(16),\r\n        gasPrice: web3Config.gasPrice,\r\n        value: '0x0',\r\n        gasLimit: estimatedGasPrice,\r\n        chainId: 3\r\n    }\r\n\r\n    var tx = new Tx(rawTx);\r\n    tx.sign(web3Config.ownerPrivKey);\r\n    var serializedTx = tx.serialize();\r\n\r\n    var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\r\n    res.send(receipt)\r\n    logs.log(receipt)\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet; sendToken"]},"metadata":{},"sourceType":"module"}