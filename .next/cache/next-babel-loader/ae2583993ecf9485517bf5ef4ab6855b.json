{"ast":null,"code":"import Web3 from 'web3';\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nconst txData = {\n  \"nonce\": 1,\n  gasLimit,\n  gasPrice,\n  value,\n  data,\n  // containing info that you want to `transfer()` to the `receiver`\n  from: fromAddress,\n  // send transaction from your address\n  to: toAddress // CHANGED; send transaction to the contract address\n\n};\n\nfunction tx() {\n  if (window.ethereum && window.ethereum.chainId == '0') {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    window.web3 = new Web3(window.ethereum);\n    const account = web3.eth.accounts;\n    const fromAddress = account.givenProvider.selectedAddress;\n\n    var Tx = require(\"ethereumjs-tx\").Transaction;\n\n    var amount = web3.utils.toHex(1e16);\n    web3.eth.getTransactionCount(fromAddress).then(function (v) {\n      console.log(v);\n    }); // set your private key here, we'll sign the transaction below\n\n    var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\";\n    const privateKeyBuffer = Buffer.from(privateKey, 'hex');\n    var contract = new web3.eth.Contract(abi, tokenContractAddress, {\n      from: fromAddress\n    });\n    const transaction = new Tx.Transaction(txData);\n    transaction.sign(privateKeyBuffer);\n    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'));\n  }\n}\n\nexport default tx;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/transaction.js"],"names":["Web3","toAddress","txData","gasLimit","gasPrice","value","data","from","fromAddress","to","tx","window","ethereum","chainId","request","method","web3","account","eth","accounts","givenProvider","selectedAddress","Tx","require","Transaction","amount","utils","toHex","getTransactionCount","then","v","console","log","privateKey","privateKeyBuffer","Buffer","contract","Contract","abi","tokenContractAddress","transaction","sign","sendSignedTransaction","serialize","toString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAIA,MAAMC,SAAS,GAAG,4CAAlB;AAEA,MAAMC,MAAM,GAAG;AACX,WAAS,CADE;AAEXC,EAAAA,QAFW;AAGXC,EAAAA,QAHW;AAIXC,EAAAA,KAJW;AAKXC,EAAAA,IALW;AAKL;AACNC,EAAAA,IAAI,EAAEC,WANK;AAMQ;AACnBC,EAAAA,EAAE,EAAER,SAPO,CAOG;;AAPH,CAAf;;AASA,SAASS,EAAT,GAAa;AACT,MAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,GAAlD,EAAuD;AACnDF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB;AACQJ,IAAAA,MAAM,CAACK,IAAP,GAAc,IAAIhB,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAd;AACA,UAAMK,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,QAAzB;AACA,UAAMX,WAAW,GAAGS,OAAO,CAACG,aAAR,CAAsBC,eAA1C;;AACA,QAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AACA,QAAIC,MAAM,GAAGT,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CAAb;AACAX,IAAAA,IAAI,CAACE,GAAL,CAASU,mBAAT,CAA6BpB,WAA7B,EAA0CqB,IAA1C,CAA+C,UAASC,CAAT,EAAW;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,KAA3E,EAP2C,CAQ3C;;AACA,QAAIG,UAAU,GAAG,kCAAjB;AACA,UAAMC,gBAAgB,GAAGC,MAAM,CAAC5B,IAAP,CAAY0B,UAAZ,EAAwB,KAAxB,CAAzB;AACA,QAAIG,QAAQ,GAAG,IAAIpB,IAAI,CAACE,GAAL,CAASmB,QAAb,CAAsBC,GAAtB,EAA2BC,oBAA3B,EAAiD;AAAChC,MAAAA,IAAI,EAAEC;AAAP,KAAjD,CAAf;AAEA,UAAMgC,WAAW,GAAG,IAAIlB,EAAE,CAACE,WAAP,CAAmBtB,MAAnB,CAApB;AACAsC,IAAAA,WAAW,CAACC,IAAZ,CAAiBP,gBAAjB;AACAlB,IAAAA,IAAI,CAACE,GAAL,CAASwB,qBAAT,CAA+B,OAAOF,WAAW,CAACG,SAAZ,GAAwBC,QAAxB,CAAiC,KAAjC,CAAtC;AACX;AACJ;;AAED,eAAelC,EAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\n\r\n\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\nconst txData = {\r\n    \"nonce\": 1,\r\n    gasLimit,\r\n    gasPrice,\r\n    value,\r\n    data, // containing info that you want to `transfer()` to the `receiver`\r\n    from: fromAddress, // send transaction from your address\r\n    to: toAddress // CHANGED; send transaction to the contract address\r\n};\r\nfunction tx(){\r\n    if (window.ethereum && window.ethereum.chainId == '0') {\r\n        window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n                window.web3 = new Web3(window.ethereum);\r\n                const account = web3.eth.accounts;\r\n                const fromAddress = account.givenProvider.selectedAddress;\r\n                var Tx = require(\"ethereumjs-tx\").Transaction\r\n                var amount = web3.utils.toHex(1e16)\r\n                web3.eth.getTransactionCount(fromAddress).then(function(v){console.log(v);})  \r\n                // set your private key here, we'll sign the transaction below\r\n                var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\"  \r\n                const privateKeyBuffer = Buffer.from(privateKey, 'hex')\r\n                var contract = new web3.eth.Contract(abi, tokenContractAddress, {from: fromAddress})\r\n\r\n                const transaction = new Tx.Transaction(txData)\r\n                transaction.sign(privateKeyBuffer)\r\n                web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))\r\n    }\r\n}\r\n\r\nexport default tx"]},"metadata":{},"sourceType":"module"}