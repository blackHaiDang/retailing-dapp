{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nvar tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var account, fromAddress, Tx, amount, privateKey;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum && window.ethereum.chainId == '0x61') {\n              window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n              window.web3 = new Web3(window.ethereum);\n              account = web3.eth.accounts;\n              fromAddress = account.givenProvider.selectedAddress; //      console.log(`Wallet: ${fromAddress}`);\n              //      const contract = new web3.eth.Contract(abi,contractAddress);\n              //     console.log(`Contract: ${contract}`);\n              //  // const chainId = web3.utils.toHex(97);\n              //     const chainId = 97\n              //      console.log(`Chain ID: ${chainId}`);\n              //      console.log(`abi: ${abi}`);\n              //      contract.methods.paid(fromAddress, 11)\n              //      .send({\n              //            from: fromAddress,\n              //            gas: 0x00,\n              //            gasPrice: 0x00\n              //      }).then(receipt=> {console.log(receipt)})\n              //   if (typeof window.ethereum !== 'undefined') {\n              //     ethereum.request({ method: 'eth_requestAccounts' });\n              // } else {\n              //     alert('Please install metamask')\n              // };\n\n              Tx = require('ethereumjs-tx');\n              amount = web3.utils.toHex(1e16);\n              web3.eth.getTransactionCount(fromAddress).then(function (v) {\n                console.log(v);\n                count = v;\n              }); // set your private key here, we'll sign the transaction below\n\n              privateKey = new Buffer('password', 'hex');\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","require","abi","toAddress","tokenContractAddress","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","fromAddress","givenProvider","selectedAddress","Tx","amount","utils","toHex","getTransactionCount","then","v","console","log","count","privateKey","Buffer"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;eAQgBC,OAAO,CAAC,mCAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAG,4CAAlB;AACA,IAAMC,oBAAoB,GAAG,4CAA7B;;SAGeC,a;;;;;4EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,gBAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,MAAlD,EAA0D;AACvDF,cAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAxB;AACAJ,cAAAA,MAAM,CAACK,IAAP,GAAc,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACMK,cAAAA,OAHiD,GAGvCD,IAAI,CAACE,GAAL,CAASC,QAH8B;AAIjDC,cAAAA,WAJiD,GAInCH,OAAO,CAACI,aAAR,CAAsBC,eAJa,EAK5D;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGIC,cAAAA,EA5BwD,GA4BnDjB,OAAO,CAAC,eAAD,CA5B4C;AA6BxDkB,cAAAA,MA7BwD,GA6B/CR,IAAI,CAACS,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CA7B+C;AA8B5DV,cAAAA,IAAI,CAACE,GAAL,CAASS,mBAAT,CAA6BP,WAA7B,EAA0CQ,IAA1C,CAA+C,UAASC,CAAT,EAAW;AAACC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgBG,gBAAAA,KAAK,GAAGH,CAAR;AAAU,eAArF,EA9B4D,CA+B9D;;AACMI,cAAAA,UAhCwD,GAgC3C,IAAIC,MAAJ,CAAW,UAAX,EAAuB,KAAvB,CAhC2C;AAmC3D;;AArCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+CA,eAAexB,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2'\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       const fromAddress = account.givenProvider.selectedAddress;\r\n  //      console.log(`Wallet: ${fromAddress}`);\r\n  //      const contract = new web3.eth.Contract(abi,contractAddress);\r\n  //     console.log(`Contract: ${contract}`);\r\n\r\n  //  // const chainId = web3.utils.toHex(97);\r\n  //     const chainId = 97\r\n\r\n  //      console.log(`Chain ID: ${chainId}`);\r\n  //      console.log(`abi: ${abi}`);\r\n  //      contract.methods.paid(fromAddress, 11)\r\n  //      .send({\r\n  //            from: fromAddress,\r\n  //            gas: 0x00,\r\n  //            gasPrice: 0x00\r\n  //      }).then(receipt=> {console.log(receipt)})\r\n       \r\n  //   if (typeof window.ethereum !== 'undefined') {\r\n  //     ethereum.request({ method: 'eth_requestAccounts' });\r\n  // } else {\r\n  //     alert('Please install metamask')\r\n  // };\r\n\r\n\r\n  var Tx = require('ethereumjs-tx');\r\n  var amount = web3.utils.toHex(1e16)\r\n  web3.eth.getTransactionCount(fromAddress).then(function(v){console.log(v); count = v})  \r\n// set your private key here, we'll sign the transaction below\r\n  var privateKey = new Buffer('password', 'hex')  \r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet"]},"metadata":{},"sourceType":"module"}