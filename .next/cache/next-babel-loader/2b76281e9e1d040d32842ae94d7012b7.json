{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nvar reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54'; // async function connectWallet() {\n//     if (window.ethereum && window.ethereum.chainId == '0x61') {\n//        window.ethereum.request({ method: \"eth_requestAccounts\" });\n//        window.web3 = new Web3(window.ethereum);\n//        const account = web3.eth.accounts;\n//        const walletAddress = account.givenProvider.selectedAddress;\n//        console.log(`Wallet: ${walletAddress}`);\n//        const contract = new web3.eth.Contract(abi,contractAddress);\n//        const chainId = web3.utils.toHex(97);\n//        console.log(`Chain ID: ${chainId}`);\n//        console.log(abi)\n//        contract.methods.paid(walletAddress)\n//        .send({\n//              from: walletAddress,\n//              gas: 0x00,\n//              gasPrice: 0x00\n//        }).then(receipt=> {console.log(receipt)})\n//     if (typeof window.ethereum !== 'undefined') {\n//       ethereum.request({ method: 'eth_requestAccounts' });\n//   } else {\n//       alert('Please install metamask')\n//   };\n//   }\n// }\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var count, data, estimatedGasPrice, rawTx, tx, serializedTx, receipt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3Config.web3.eth.getTransactionCount(walletAddress);\n\n          case 2:\n            count = _context.sent;\n            data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount * Math.pow(10, 18)).encodeABI();\n            _context.next = 6;\n            return web3Config.web3.eth.estimateGas({\n              from: walletAddress,\n              to: reciever,\n              data: data\n            });\n\n          case 6:\n            estimatedGasPrice = _context.sent;\n            logs.error(estimatedGasPrice);\n            rawTx = {\n              from: process.env.OWNER_ADDRESS,\n              to: process.env.CONTRACT_ADDRESS,\n              data: data,\n              nonce: \"0x\" + count.toString(16),\n              gasPrice: web3Config.gasPrice,\n              value: '0x0',\n              gasLimit: estimatedGasPrice,\n              chainId: 3\n            };\n            tx = new Tx(rawTx);\n            tx.sign(web3Config.ownerPrivKey);\n            serializedTx = tx.serialize();\n            _context.next = 14;\n            return web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n\n          case 14:\n            receipt = _context.sent;\n            res.send(receipt);\n            logs.log(receipt);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nexport default connectWallet;\nsendToken;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","require","abi","contractAddress","reciever","connectWallet","web3Config","web3","eth","getTransactionCount","walletAddress","count","data","contractInstance","methods","transfer","req","body","address","amount","Math","pow","encodeABI","estimateGas","from","to","estimatedGasPrice","logs","error","rawTx","process","env","OWNER_ADDRESS","CONTRACT_ADDRESS","nonce","toString","gasPrice","value","gasLimit","chainId","tx","Tx","sign","ownerPrivKey","serializedTx","serialize","sendSignedTransaction","receipt","res","send","log","sendToken"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;eAEgBC,OAAO,CAAC,mCAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,eAAe,GAAG,4CAAxB;AACA,IAAMC,QAAQ,GAAG,4CAAjB,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;SAEeC,a;;;;;4EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBC,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBC,mBAApB,CAAwCC,aAAxC,CADpB;;AAAA;AACMC,YAAAA,KADN;AAEMC,YAAAA,IAFN,GAEaN,UAAU,CAACO,gBAAX,CAA4BC,OAA5B,CAAoCC,QAApC,CAA6CC,GAAG,CAACC,IAAJ,CAASC,OAAtD,EAA+DF,GAAG,CAACC,IAAJ,CAASE,MAAT,GAAgBC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAY,EAAZ,CAA/E,EAAgGC,SAAhG,EAFb;AAAA;AAAA,mBAIgChB,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBe,WAApB,CAAgC;AAC5DC,cAAAA,IAAI,EAAGd,aADqD;AAE5De,cAAAA,EAAE,EAAIrB,QAFsD;AAG5DQ,cAAAA,IAAI,EAAGA;AAHqD,aAAhC,CAJhC;;AAAA;AAIMc,YAAAA,iBAJN;AAUIC,YAAAA,IAAI,CAACC,KAAL,CAAWF,iBAAX;AACIG,YAAAA,KAXR,GAWgB;AACRL,cAAAA,IAAI,EAAGM,OAAO,CAACC,GAAR,CAAYC,aADX;AAERP,cAAAA,EAAE,EAAIK,OAAO,CAACC,GAAR,CAAYE,gBAFV;AAGRrB,cAAAA,IAAI,EAAGA,IAHC;AAIRsB,cAAAA,KAAK,EAAE,OAAOvB,KAAK,CAACwB,QAAN,CAAe,EAAf,CAJN;AAKRC,cAAAA,QAAQ,EAAE9B,UAAU,CAAC8B,QALb;AAMRC,cAAAA,KAAK,EAAE,KANC;AAORC,cAAAA,QAAQ,EAAEZ,iBAPF;AAQRa,cAAAA,OAAO,EAAE;AARD,aAXhB;AAsBQC,YAAAA,EAtBR,GAsBa,IAAIC,EAAJ,CAAOZ,KAAP,CAtBb;AAuBIW,YAAAA,EAAE,CAACE,IAAH,CAAQpC,UAAU,CAACqC,YAAnB;AACIC,YAAAA,YAxBR,GAwBuBJ,EAAE,CAACK,SAAH,EAxBvB;AAAA;AAAA,mBA0BwBvC,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoBsC,qBAApB,CAA0C,OAAOF,YAAY,CAACT,QAAb,CAAsB,KAAtB,CAAjD,CA1BxB;;AAAA;AA0BQY,YAAAA,OA1BR;AA2BIC,YAAAA,GAAG,CAACC,IAAJ,CAASF,OAAT;AACApB,YAAAA,IAAI,CAACuB,GAAL,CAASH,OAAT;;AA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmCA,eAAe1C,aAAf;AAA8B8C,SAAS","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\n// async function connectWallet() {\r\n\r\n//     if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n//        window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n//        window.web3 = new Web3(window.ethereum);\r\n//        const account = web3.eth.accounts;\r\n//        const walletAddress = account.givenProvider.selectedAddress;\r\n//        console.log(`Wallet: ${walletAddress}`);\r\n//        const contract = new web3.eth.Contract(abi,contractAddress);\r\n//        const chainId = web3.utils.toHex(97);\r\n//        console.log(`Chain ID: ${chainId}`);\r\n//        console.log(abi)\r\n//        contract.methods.paid(walletAddress)\r\n//        .send({\r\n//              from: walletAddress,\r\n//              gas: 0x00,\r\n//              gasPrice: 0x00\r\n//        }).then(receipt=> {console.log(receipt)})\r\n       \r\n//     if (typeof window.ethereum !== 'undefined') {\r\n//       ethereum.request({ method: 'eth_requestAccounts' });\r\n//   } else {\r\n//       alert('Please install metamask')\r\n//   };\r\n//   }\r\n\r\n// }\r\n\r\nasync function connectWallet (){\r\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\r\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount*Math.pow(10,18)).encodeABI();\r\n\r\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\r\n    from : walletAddress,\r\n    to:   reciever,\r\n    data : data\r\n  });\r\n\r\n    logs.error(estimatedGasPrice)\r\n    var rawTx = {\r\n        from : process.env.OWNER_ADDRESS,\r\n        to:   process.env.CONTRACT_ADDRESS,\r\n        data : data,\r\n        nonce: \"0x\" + count.toString(16),\r\n        gasPrice: web3Config.gasPrice,\r\n        value: '0x0',\r\n        gasLimit: estimatedGasPrice,\r\n        chainId: 3\r\n    }\r\n\r\n    var tx = new Tx(rawTx);\r\n    tx.sign(web3Config.ownerPrivKey);\r\n    var serializedTx = tx.serialize();\r\n\r\n    var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\r\n    res.send(receipt)\r\n    logs.log(receipt)\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet; sendToken"]},"metadata":{},"sourceType":"module"}