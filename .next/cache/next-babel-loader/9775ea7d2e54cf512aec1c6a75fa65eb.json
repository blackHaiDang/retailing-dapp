{"ast":null,"code":"import Web3 from 'web3';\n\nconst {\n  abi\n} = require('../build/contracts/Retailing.json');\n\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\n\nasync function connectWallet() {\n  if (window.ethereum && window.ethereum.chainId == '0x61') {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    window.web3 = new Web3(window.ethereum);\n    const account = web3.eth.accounts;\n    const walletAddress = account.givenProvider.selectedAddress;\n    console.log(`Wallet: ${walletAddress}`);\n    const contract = new web3.eth.Contract(abi, contractAddress);\n    const chainId = web3.utils.toHex(97);\n    console.log(`Chain ID: ${chainId}`);\n    console.log(abi);\n    contract.methods.paid(walletAddress).send({\n      from: walletAddress,\n      gas: 0x00,\n      gasPrice: 0x00\n    }).then(receipt => {\n      console.log(receipt);\n    });\n\n    if (typeof window.ethereum !== 'undefined') {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } else {\n      alert('Please install metamask');\n    }\n\n    ;\n  }\n}\n\nasync function sendToken() {\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount * Math.pow(10, 18)).encodeABI();\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\n    from: walletAddress,\n    to: reciever,\n    data: data\n  });\n  logs.error(estimatedGasPrice);\n  var rawTx = {\n    from: process.env.OWNER_ADDRESS,\n    to: process.env.CONTRACT_ADDRESS,\n    data: data,\n    nonce: \"0x\" + count.toString(16),\n    gasPrice: web3Config.gasPrice,\n    value: '0x0',\n    gasLimit: estimatedGasPrice,\n    chainId: 3\n  };\n  var tx = new Tx(rawTx);\n  tx.sign(web3Config.ownerPrivKey);\n  var serializedTx = tx.serialize();\n  var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n  res.send(receipt);\n  logs.log(receipt);\n}\n\nexport default connectWallet;\nsendToken;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","abi","require","contractAddress","reciever","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","walletAddress","givenProvider","selectedAddress","console","log","contract","Contract","utils","toHex","methods","paid","send","from","gas","gasPrice","then","receipt","alert","sendToken","count","web3Config","getTransactionCount","data","contractInstance","transfer","req","body","address","amount","Math","pow","encodeABI","estimatedGasPrice","estimateGas","to","logs","error","rawTx","process","env","OWNER_ADDRESS","CONTRACT_ADDRESS","nonce","toString","value","gasLimit","tx","Tx","sign","ownerPrivKey","serializedTx","serialize","sendSignedTransaction","res"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,OAAO,CAAC,mCAAD,CAAvB;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,MAAMC,QAAQ,GAAG,4CAAjB;;AAGA,eAAeC,aAAf,GAA+B;AAE3B,MAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,MAAlD,EAA0D;AACvDF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB;AACAJ,IAAAA,MAAM,CAACK,IAAP,GAAc,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACA,UAAMK,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,QAAzB;AACA,UAAMC,aAAa,GAAGH,OAAO,CAACI,aAAR,CAAsBC,eAA5C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUJ,aAAc,EAArC;AACA,UAAMK,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBpB,GAAtB,EAA0BE,eAA1B,CAAjB;AACA,UAAMK,OAAO,GAAGG,IAAI,CAACW,KAAL,CAAWC,KAAX,CAAiB,EAAjB,CAAhB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAYX,OAAQ,EAAjC;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACAmB,IAAAA,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsBV,aAAtB,EACCW,IADD,CACM;AACAC,MAAAA,IAAI,EAAEZ,aADN;AAEAa,MAAAA,GAAG,EAAE,IAFL;AAGAC,MAAAA,QAAQ,EAAE;AAHV,KADN,EAKGC,IALH,CAKQC,OAAO,IAAG;AAACb,MAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AAAqB,KALxC;;AAOH,QAAI,OAAOzB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1CA,MAAAA,QAAQ,CAACE,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB;AACH,KAFC,MAEK;AACHsB,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;;AAAA;AACA;AAEF;;AAED,eAAeC,SAAf,GAA2B;AACzB,MAAIC,KAAK,GAAG,MAAMC,UAAU,CAACxB,IAAX,CAAgBE,GAAhB,CAAoBuB,mBAApB,CAAwCrB,aAAxC,CAAlB;AACA,MAAIsB,IAAI,GAAGF,UAAU,CAACG,gBAAX,CAA4Bd,OAA5B,CAAoCe,QAApC,CAA6CC,GAAG,CAACC,IAAJ,CAASC,OAAtD,EAA+DF,GAAG,CAACC,IAAJ,CAASE,MAAT,GAAgBC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAY,EAAZ,CAA/E,EAAgGC,SAAhG,EAAX;AAEA,MAAIC,iBAAiB,GAAG,MAAMZ,UAAU,CAACxB,IAAX,CAAgBE,GAAhB,CAAoBmC,WAApB,CAAgC;AAC5DrB,IAAAA,IAAI,EAAGZ,aADqD;AAE5DkC,IAAAA,EAAE,EAAI7C,QAFsD;AAG5DiC,IAAAA,IAAI,EAAGA;AAHqD,GAAhC,CAA9B;AAMEa,EAAAA,IAAI,CAACC,KAAL,CAAWJ,iBAAX;AACA,MAAIK,KAAK,GAAG;AACRzB,IAAAA,IAAI,EAAG0B,OAAO,CAACC,GAAR,CAAYC,aADX;AAERN,IAAAA,EAAE,EAAII,OAAO,CAACC,GAAR,CAAYE,gBAFV;AAGRnB,IAAAA,IAAI,EAAGA,IAHC;AAIRoB,IAAAA,KAAK,EAAE,OAAOvB,KAAK,CAACwB,QAAN,CAAe,EAAf,CAJN;AAKR7B,IAAAA,QAAQ,EAAEM,UAAU,CAACN,QALb;AAMR8B,IAAAA,KAAK,EAAE,KANC;AAORC,IAAAA,QAAQ,EAAEb,iBAPF;AAQRvC,IAAAA,OAAO,EAAE;AARD,GAAZ;AAWA,MAAIqD,EAAE,GAAG,IAAIC,EAAJ,CAAOV,KAAP,CAAT;AACAS,EAAAA,EAAE,CAACE,IAAH,CAAQ5B,UAAU,CAAC6B,YAAnB;AACA,MAAIC,YAAY,GAAGJ,EAAE,CAACK,SAAH,EAAnB;AAEA,MAAInC,OAAO,GAAG,MAAMI,UAAU,CAACxB,IAAX,CAAgBE,GAAhB,CAAoBsD,qBAApB,CAA0C,OAAOF,YAAY,CAACP,QAAb,CAAsB,KAAtB,CAAjD,CAApB;AACAU,EAAAA,GAAG,CAAC1C,IAAJ,CAASK,OAAT;AACAmB,EAAAA,IAAI,CAAC/B,GAAL,CAASY,OAAT;AACH;;AAMD,eAAe1B,aAAf;AAA8B4B,SAAS","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       const walletAddress = account.givenProvider.selectedAddress;\r\n       console.log(`Wallet: ${walletAddress}`);\r\n       const contract = new web3.eth.Contract(abi,contractAddress);\r\n       const chainId = web3.utils.toHex(97);\r\n       console.log(`Chain ID: ${chainId}`);\r\n       console.log(abi)\r\n       contract.methods.paid(walletAddress)\r\n       .send({\r\n             from: walletAddress,\r\n             gas: 0x00,\r\n             gasPrice: 0x00\r\n       }).then(receipt=> {console.log(receipt)})\r\n       \r\n    if (typeof window.ethereum !== 'undefined') {\r\n      ethereum.request({ method: 'eth_requestAccounts' });\r\n  } else {\r\n      alert('Please install metamask')\r\n  };\r\n  }\r\n\r\n}\r\n\r\nasync function sendToken (){\r\n  var count = await web3Config.web3.eth.getTransactionCount(walletAddress);\r\n  var data = web3Config.contractInstance.methods.transfer(req.body.address, req.body.amount*Math.pow(10,18)).encodeABI();\r\n\r\n  var estimatedGasPrice = await web3Config.web3.eth.estimateGas({\r\n    from : walletAddress,\r\n    to:   reciever,\r\n    data : data\r\n  });\r\n\r\n    logs.error(estimatedGasPrice)\r\n    var rawTx = {\r\n        from : process.env.OWNER_ADDRESS,\r\n        to:   process.env.CONTRACT_ADDRESS,\r\n        data : data,\r\n        nonce: \"0x\" + count.toString(16),\r\n        gasPrice: web3Config.gasPrice,\r\n        value: '0x0',\r\n        gasLimit: estimatedGasPrice,\r\n        chainId: 3\r\n    }\r\n\r\n    var tx = new Tx(rawTx);\r\n    tx.sign(web3Config.ownerPrivKey);\r\n    var serializedTx = tx.serialize();\r\n\r\n    var receipt = await web3Config.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\r\n    res.send(receipt)\r\n    logs.log(receipt)\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet; sendToken"]},"metadata":{},"sourceType":"module"}