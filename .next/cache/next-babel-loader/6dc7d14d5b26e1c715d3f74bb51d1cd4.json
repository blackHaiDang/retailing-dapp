{"ast":null,"code":"import Web3 from 'web3';\n\nconst {\n  abi\n} = require('../build/contracts/Retailing.json');\n\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\n\nasync function connectWallet() {\n  if (window.ethereum && window.ethereum.chainId == '0x61') {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    window.web3 = new Web3(window.ethereum);\n    const account = web3.eth.accounts;\n    const fromAddress = account.givenProvider.selectedAddress; //      console.log(`Wallet: ${fromAddress}`);\n    //      const contract = new web3.eth.Contract(abi,contractAddress);\n    //     console.log(`Contract: ${contract}`);\n    //  // const chainId = web3.utils.toHex(97);\n    //     const chainId = 97\n    //      console.log(`Chain ID: ${chainId}`);\n    //      console.log(`abi: ${abi}`);\n    //      contract.methods.paid(fromAddress, 11)\n    //      .send({\n    //            from: fromAddress,\n    //            gas: 0x00,\n    //            gasPrice: 0x00\n    //      }).then(receipt=> {console.log(receipt)})\n    //   if (typeof window.ethereum !== 'undefined') {\n    //     ethereum.request({ method: 'eth_requestAccounts' });\n    // } else {\n    //     alert('Please install metamask')\n    // };\n\n    var Tx = require(\"ethereumjs-tx\").Transaction;\n\n    var amount = web3.utils.toHex(1e16);\n    web3.eth.getTransactionCount(fromAddress).then(function (v) {\n      console.log(v);\n      count = v;\n    }); // set your private key here, we'll sign the transaction below\n\n    var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\";\n    var contract = new web3.eth.Contract(abi, tokenContractAddress, {\n      from: fromAddress\n    });\n    var rawTransaction = {\n      \"from\": fromAddress,\n      \"gasPrice\": web3.utils.toHex(2 * 1e9),\n      \"gasLimit\": web3.utils.toHex(210000),\n      \"to\": tokenContractAddress,\n      \"value\": \"0x0\",\n      \"data\": contract.methods.paid(toAddress, amount).encodeABI(),\n      \"nonce\": web3.utils.toHex(10)\n    };\n  }\n\n  var transaction = new Tx(rawTransaction);\n  transaction.sign(privateKey);\n  web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex')); //  contract.methods.balanceOf(0x2EFb54Fd77dc2BE0B2463F8E049502330d5C9791).call().then(function(balance){console.log(balance)})\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/ecommerce-dapp/components/Metamask.js"],"names":["Web3","abi","require","toAddress","tokenContractAddress","connectWallet","window","ethereum","chainId","request","method","web3","account","eth","accounts","fromAddress","givenProvider","selectedAddress","Tx","Transaction","amount","utils","toHex","getTransactionCount","then","v","console","log","count","privateKey","contract","Contract","from","rawTransaction","methods","paid","encodeABI","transaction","sign","sendSignedTransaction","serialize","toString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAQA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,OAAO,CAAC,mCAAD,CAAvB;;AACA,MAAMC,SAAS,GAAG,4CAAlB;AACA,MAAMC,oBAAoB,GAAG,4CAA7B;;AAGA,eAAeC,aAAf,GAA+B;AAE3B,MAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,IAA2B,MAAlD,EAA0D;AACvDF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB;AACAJ,IAAAA,MAAM,CAACK,IAAP,GAAc,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACA,UAAMK,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,QAAzB;AACA,UAAMC,WAAW,GAAGH,OAAO,CAACI,aAAR,CAAsBC,eAA1C,CAJuD,CAK5D;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA,QAAIC,EAAE,GAAGhB,OAAO,CAAC,eAAD,CAAP,CAAyBiB,WAAlC;;AACA,QAAIC,MAAM,GAAGT,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CAAb;AACAX,IAAAA,IAAI,CAACE,GAAL,CAASU,mBAAT,CAA6BR,WAA7B,EAA0CS,IAA1C,CAA+C,UAASC,CAAT,EAAW;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgBG,MAAAA,KAAK,GAAGH,CAAR;AAAU,KAArF,EA9B4D,CA+B9D;;AACE,QAAII,UAAU,GAAG,kCAAjB;AACA,QAAIC,QAAQ,GAAG,IAAInB,IAAI,CAACE,GAAL,CAASkB,QAAb,CAAsB9B,GAAtB,EAA2BG,oBAA3B,EAAiD;AAAC4B,MAAAA,IAAI,EAAEjB;AAAP,KAAjD,CAAf;AACA,QAAIkB,cAAc,GAAG;AAAC,cAAOlB,WAAR;AAAqB,kBAAWJ,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,IAAI,GAArB,CAAhC;AAA0D,kBAAWX,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,MAAjB,CAArE;AAA8F,YAAKlB,oBAAnG;AAAwH,eAAQ,KAAhI;AAAsI,cAAO0B,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsBhC,SAAtB,EAAiCiB,MAAjC,EAAyCgB,SAAzC,EAA7I;AAAkM,eAAQzB,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiB,EAAjB;AAA1M,KAArB;AACC;;AACD,MAAIe,WAAW,GAAG,IAAInB,EAAJ,CAAOe,cAAP,CAAlB;AACAI,EAAAA,WAAW,CAACC,IAAZ,CAAiBT,UAAjB;AACAlB,EAAAA,IAAI,CAACE,GAAL,CAAS0B,qBAAT,CAA+B,OAAOF,WAAW,CAACG,SAAZ,GAAwBC,QAAxB,CAAiC,KAAjC,CAAtC,EAxC6B,CAyC/B;AACC;;AAQD,eAAepC,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\nconst tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2'\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum && window.ethereum.chainId == '0x61') {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       const fromAddress = account.givenProvider.selectedAddress;\r\n  //      console.log(`Wallet: ${fromAddress}`);\r\n  //      const contract = new web3.eth.Contract(abi,contractAddress);\r\n  //     console.log(`Contract: ${contract}`);\r\n\r\n  //  // const chainId = web3.utils.toHex(97);\r\n  //     const chainId = 97\r\n\r\n  //      console.log(`Chain ID: ${chainId}`);\r\n  //      console.log(`abi: ${abi}`);\r\n  //      contract.methods.paid(fromAddress, 11)\r\n  //      .send({\r\n  //            from: fromAddress,\r\n  //            gas: 0x00,\r\n  //            gasPrice: 0x00\r\n  //      }).then(receipt=> {console.log(receipt)})\r\n       \r\n  //   if (typeof window.ethereum !== 'undefined') {\r\n  //     ethereum.request({ method: 'eth_requestAccounts' });\r\n  // } else {\r\n  //     alert('Please install metamask')\r\n  // };\r\n\r\n\r\n  var Tx = require(\"ethereumjs-tx\").Transaction\r\n  var amount = web3.utils.toHex(1e16)\r\n  web3.eth.getTransactionCount(fromAddress).then(function(v){console.log(v); count = v})  \r\n// set your private key here, we'll sign the transaction below\r\n  var privateKey = \"77dc2BE0B2463F8E049502330d5C9791\"  \r\n  var contract = new web3.eth.Contract(abi, tokenContractAddress, {from: fromAddress})\r\n  var rawTransaction = {\"from\":fromAddress, \"gasPrice\":web3.utils.toHex(2 * 1e9),\"gasLimit\":web3.utils.toHex(210000),\"to\":tokenContractAddress,\"value\":\"0x0\",\"data\":contract.methods.paid(toAddress, amount).encodeABI(),\"nonce\":web3.utils.toHex(10)} \r\n  }\r\n  var transaction = new Tx(rawTransaction)\r\n  transaction.sign(privateKey)\r\n  web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))\r\n//  contract.methods.balanceOf(0x2EFb54Fd77dc2BE0B2463F8E049502330d5C9791).call().then(function(balance){console.log(balance)})\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet"]},"metadata":{},"sourceType":"module"}