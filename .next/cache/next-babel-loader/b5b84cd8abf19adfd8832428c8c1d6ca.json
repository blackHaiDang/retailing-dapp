{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar toAddress = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\nvar tokenContractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var account, fromAddress, contract, chainId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum && window.ethereum.chainId == '0x61') {\n              window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n              window.web3 = new Web3(window.ethereum);\n              account = web3.eth.accounts;\n              fromAddress = account.givenProvider.selectedAddress;\n              console.log(\"Wallet: \".concat(fromAddress));\n              contract = new web3.eth.Contract(abi, tokenContractAddress);\n              console.log(\"Contract: \".concat(contract));\n              chainId = web3.utils.toHex(5); //   const chainId = '0x61'\n\n              console.log(\"Chain ID: \".concat(chainId));\n              console.log(\"abi: \".concat(abi));\n              contract.methods.paid(fromAddress, 11).send({\n                from: fromAddress,\n                gas: 0x00,\n                gasPrice: 0x00\n              }).then(function (receipt) {\n                console.log(receipt);\n              });\n\n              if (typeof window.ethereum !== 'undefined') {\n                ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n              } else {\n                alert('Please install metamask');\n              }\n\n              ;\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nexport default connectWallet;","map":null,"metadata":{},"sourceType":"module"}