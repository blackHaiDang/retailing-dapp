{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n\nvar _require = require('../build/contracts/Retailing.json'),\n    abi = _require.abi;\n\nvar contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\nvar reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\n\nfunction connectWallet() {\n  return _connectWallet.apply(this, arguments);\n}\n\nfunction _connectWallet() {\n  _connectWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var account, _walletAddress, contract, chainId, _contract;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum) {\n              window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n              window.web3 = new Web3(window.ethereum);\n              account = web3.eth.accounts; //Get the current MetaMask selected/active wallet\n\n              _walletAddress = account.givenProvider.selectedAddress;\n              console.log(\"Wallet: \".concat(_walletAddress));\n              contract = new web3.eth.Contract(abi, contractAddress);\n              console.log(\"TX Address:\" + _walletAddress);\n              console.log(web3.utils.toChecksumAddress(_walletAddress));\n              contract.methods.paid(_walletAddress).send({\n                from: _walletAddress,\n                gas: 0x00,\n                gasPrice: 0x00\n              }).then(function (receipt) {\n                console.log(receipt);\n              });\n\n              if (typeof window.ethereum !== 'undefined') {\n                ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n              } else {\n                alert('Please install metamask');\n              }\n\n              ;\n            }\n\n            chainId = web3.utils.toHex(97);\n            console.log(chainId);\n            console.log(abi); // web3.utils.toChecksumAddress(\"walletAddress\")\n\n            if (window.ethereum.chainId == '0x61') {\n              _contract = new web3.eth.Contract(abi, contractAddress);\n\n              _contract.methods.paid(walletAddress).send({\n                from: \"walletAddress\",\n                gas: 0x00,\n                gasPrice: 0x00\n              }).then(function (receipt) {\n                console.log(receipt);\n              });\n            } else {\n              ethereum.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{\n                  chainId: '0x61'\n                }]\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectWallet.apply(this, arguments);\n}\n\nexport default connectWallet;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/jamstack-ecommerce/components/Metamask.js"],"names":["Web3","require","abi","contractAddress","reciever","connectWallet","window","ethereum","request","method","web3","account","eth","accounts","walletAddress","givenProvider","selectedAddress","console","log","contract","Contract","utils","toChecksumAddress","methods","paid","send","from","gas","gasPrice","then","receipt","alert","chainId","toHex","params"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;eAEgBC,OAAO,CAAC,mCAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,eAAe,GAAG,4CAAxB;AACA,IAAMC,QAAQ,GAAG,4CAAjB;;SAGeC,a;;;;;4EAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI,gBAAIC,MAAM,CAACC,QAAX,EAAqB;AAClBD,cAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAxB;AACAH,cAAAA,MAAM,CAACI,IAAP,GAAc,IAAIV,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAd;AACMI,cAAAA,OAHY,GAGFD,IAAI,CAACE,GAAL,CAASC,QAHP,EAIlB;;AACMC,cAAAA,cALY,GAKIH,OAAO,CAACI,aAAR,CAAsBC,eAL1B;AAMlBC,cAAAA,OAAO,CAACC,GAAR,mBAAuBJ,cAAvB;AACMK,cAAAA,QAPY,GAOD,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBlB,GAAtB,EAA0BC,eAA1B,CAPC;AAQlBc,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBJ,cAA5B;AACAG,cAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACW,KAAL,CAAWC,iBAAX,CAA6BR,cAA7B,CAAZ;AAEAK,cAAAA,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsBV,cAAtB,EACCW,IADD,CACM;AACAC,gBAAAA,IAAI,EAAEZ,cADN;AAEAa,gBAAAA,GAAG,EAAE,IAFL;AAGAC,gBAAAA,QAAQ,EAAE;AAHV,eADN,EAKGC,IALH,CAKQ,UAAAC,OAAO,EAAG;AAACb,gBAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AAAqB,eALxC;;AAOH,kBAAI,OAAOxB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1CA,gBAAAA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAjB;AACH,eAFC,MAEK;AACHsB,gBAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;;AAAA;AACA;;AAGKC,YAAAA,OA5BR,GA4BkBtB,IAAI,CAACW,KAAL,CAAWY,KAAX,CAAiB,EAAjB,CA5BlB;AA6BEhB,YAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ,EA9BF,CA+BE;;AACA,gBAAGI,MAAM,CAACC,QAAP,CAAgByB,OAAhB,IAA2B,MAA9B,EAAqC;AAC7Bb,cAAAA,SAD6B,GAClB,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBlB,GAAtB,EAA0BC,eAA1B,CADkB;;AAEnCgB,cAAAA,SAAQ,CAACI,OAAT,CAAiBC,IAAjB,CAAsBV,aAAtB,EACCW,IADD,CACM;AACAC,gBAAAA,IAAI,EAAE,eADN;AAEAC,gBAAAA,GAAG,EAAE,IAFL;AAGAC,gBAAAA,QAAQ,EAAE;AAHV,eADN,EAKGC,IALH,CAKQ,UAAAC,OAAO,EAAG;AAACb,gBAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AAAqB,eALxC;AAUD,aAZD,MAYO;AACLvB,cAAAA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,gBAAAA,MAAM,EAAE,4BAAV;AAAwCyB,gBAAAA,MAAM,EAAC,CAAC;AAACF,kBAAAA,OAAO,EAAE;AAAV,iBAAD;AAA/C,eAAjB;AACD;;AA9CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqDA,eAAe3B,aAAf","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst { abi } = require('../build/contracts/Retailing.json');\r\nconst contractAddress = '0xa24cc613Ecd1be73B474b12EEb9592388e8509b2';\r\nconst reciever = '0x57102EB7596D54cE2C139C7b047024286ca8Ba54';\r\n\r\n\r\nasync function connectWallet() {\r\n\r\n    if (window.ethereum) {\r\n       window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n       window.web3 = new Web3(window.ethereum);\r\n       const account = web3.eth.accounts;\r\n       //Get the current MetaMask selected/active wallet\r\n       const walletAddress = account.givenProvider.selectedAddress;\r\n       console.log(`Wallet: ${walletAddress}`);\r\n       const contract = new web3.eth.Contract(abi,contractAddress);\r\n       console.log(\"TX Address:\" + walletAddress)\r\n       console.log(web3.utils.toChecksumAddress(walletAddress))\r\n       \r\n       contract.methods.paid(walletAddress)\r\n       .send({\r\n             from: walletAddress,\r\n             gas: 0x00,\r\n             gasPrice: 0x00\r\n       }).then(receipt=> {console.log(receipt)})\r\n       \r\n    if (typeof window.ethereum !== 'undefined') {\r\n      ethereum.request({ method: 'eth_requestAccounts' });\r\n  } else {\r\n      alert('Please install metamask')\r\n  };\r\n  }\r\n\r\n\r\n  const chainId = web3.utils.toHex(97);\r\n  console.log(chainId)\r\n  console.log(abi)\r\n  // web3.utils.toChecksumAddress(\"walletAddress\")\r\n  if(window.ethereum.chainId == '0x61'){\r\n    const contract = new web3.eth.Contract(abi,contractAddress);\r\n    contract.methods.paid(walletAddress)\r\n    .send({\r\n          from: \"walletAddress\",\r\n          gas: 0x00,\r\n          gasPrice: 0x00\r\n    }).then(receipt=> {console.log(receipt)})\r\n\r\n\r\n\r\n    \r\n  } else {\r\n    ethereum.request({ method: 'wallet_switchEthereumChain', params:[{chainId: '0x61'}]})\r\n  }\r\n}\r\n\r\n\r\n  \r\n\r\n\r\nexport default connectWallet;"]},"metadata":{},"sourceType":"module"}